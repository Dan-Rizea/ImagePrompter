@page "/{SessionId:guid}/{VersionName}"

@attribute [StreamRendering]

@inject NavigationManager _navigationManager;
@inject IJSRuntime _jsRuntime;
@inject ISessionRepository _sessionRepository;
@inject ISessionVersionRepository _sessionVersionRepository;
@inject ISessionLogicService _sessionLogicService;
@inject ILLMServices _llmServices;

<style>
    body {
        background-color: #1E1F26;
    }
</style>

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
</head>

<PageTitle>Session</PageTitle>

<div class="container pt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="image-container mt-5">
                <img src="data:image/png;base64,@Image" alt="Canvas" class="img-fluid img-thumbnail"/>
            </div>
            <div class="mb-3">
                <label for="exampleFormControlTextarea1" class="form-label">Prompt area</label>
                <textarea class="form-control" id="exampleFormControlTextarea1" @bind="Prompt" @bind:event="oninput" @onkeydown="@HandleEnter" rows="3"></textarea>
            </div>
        </div>
    </div>
</div>

@* TODO: Extract script into a json file ~Dan R. *@
<script>
    function downloadFile(fileName, content) {
        const blob = new Blob([content], { type: 'application/octet-stream' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        link.click();
        window.URL.revokeObjectURL(url);
    }
</script>

@code {
    [Parameter]
    public Guid SessionId { get; set; }
    [Parameter]
    public string VersionName { get; set; }

    public string Prompt { get; set; } = string.Empty;
    public string Image { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var initialSession = await _sessionRepository.GetBySessionIdAsync(SessionId);
        if (initialSession != null)
        {
            Image = Convert.ToBase64String(initialSession.SessionVersions.Where(sv => sv.Name == VersionName).SingleOrDefault().Image);
        }
        else
        {
            var session = await _sessionRepository.GetBySessionIdAsync(SessionId);
            if (session != null)
            {
                var firstSessionVersion = session.SessionVersions.FirstOrDefault();
                if (firstSessionVersion != null)
                {
                    _navigationManager.NavigateTo($"/{session.SessionId}/{firstSessionVersion}");
                }
            }
            else await _sessionLogicService.InitializeSessionAsync(); 
        }
    }

    private async Task HandleEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            var prompt = Prompt;
            Prompt = "";

            var currentSession = await _sessionRepository.GetBySessionIdAsync(SessionId);
            var currentSessionVersion = await _sessionVersionRepository.GetBySessionIdVersionNameAsync(currentSession.Id, VersionName);

            var promptingOutput = await _llmServices.PromptAsync(prompt, currentSession, currentSessionVersion);
            if (promptingOutput == "DownloadImage") await _jsRuntime.InvokeVoidAsync("downloadFile", "output.png", currentSessionVersion.Image);
            else if (promptingOutput == "GenerateImage")
            {
                var image = await _llmServices.GenerateImageAsync(prompt);

                var newVersion = await _sessionLogicService.InitializeNewSessionVersionAsync(Guid.NewGuid().ToString(), prompt, image, currentSession);

                _navigationManager.NavigateTo($"/{currentSession.SessionId.ToString()}/{newVersion.Name}", true);
            }
        }
    }
}
